generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Base {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation("UserBases", fields: [ownerId], references: [id])
  tabs        Tab[]

  @@index([ownerId])
}

// New Tab model
model Tab {
  id          String   @id @default(cuid())
  name        String
  description String?
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  baseId      String
  base        Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
  views       View[]   // Tab has many Views

  @@index([baseId])
}

model View {
  id        String   @id @default(cuid())
  name      String
  config    Json     @default("{}")
  position  Int      @default(0)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tabId     String
  tab       Tab      @relation(fields: [tabId], references: [id], onDelete: Cascade)
  tableId   String   // Each View is associated with a Table
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tabId])
  @@index([tableId])
}

model Table {
  id           String   @id @default(cuid())
  name         String
  description  String?
  isViewLinked Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  columns      Column[]
  rows         Row[]
  views        View[]   // Table has many Views
}

model Column {
  id        String     @id @default(cuid())
  name      String
  type      ColumnType @default(TEXT)
  position  Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tableId   String
  cells     Cell[]
  table     Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId])
}

model Row {
  id        String   @id @default(cuid())
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tableId   String
  cells     Cell[]
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId])
}

model Cell {
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  columnId  String
  rowId     String
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  row       Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)

  @@id([columnId, rowId])
  @@index([columnId])
  @@index([rowId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  ownedBases    Base[]    @relation("UserBases")
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ColumnType {
  TEXT
  NUMBER
}